#!/usr/bin/env python3

"""
Example script to record data from SPADIC 1.0 to stdout.

Uses SpadicDataMonitor as convenience layer to access the data, instead of
creating a SpadicDataClient directly.
"""

import queue
import sys

# import like this to save space in with-statements...
from spadic.tools import SpadicDataMonitor as Monitor
from spadic import SpadicControlClient as ControlClient

#----------------------------------------------------------
# helper functions
#----------------------------------------------------------

class OptionError(Exception):
    pass

def get_option(name):
    a = sys.argv
    try:
        return a[a.index(name)+1]
    except ValueError:
        raise OptionError("ERROR: %s option missing" % name)

def stdout(d):
    sys.stdout.write(d)
    sys.stdout.flush()

#----------------------------------------------------------
# record function
#----------------------------------------------------------

def record(monitor, channel, num, ctrl_client, dlm_trigger=False):
    try:
        pulse, mask = monitor.get_last_data(channel, block=False)
    except queue.Empty:
        pass
    # now any old data is gone
    pulses = []
    for i in range(num):
        if dlm_trigger:
            ctrl_client.send_dlm(11)
        pulse, mask = monitor.get_last_data(channel)
        stdout('.')
        pulses.append(pulse)
    stdout('\n')
    return pulses

#----------------------------------------------------------
# main
#----------------------------------------------------------

usage_str = """
usage:
  spadic_recorder [options] [flags]

  options (required):
    --host  name of host running spadic_server
    --ch    channel number (0-31) from which to record data
    --num   number of data messages to record

  flags:
    --dlm-trigger  if the flag is given, use DLM force trigger (must be
                   enabled for the selected channel in column 5 in pages
                   3/4 of spadic_control)

example:
  spadic_recorder --host mycomputer --ch 31 --num 100 > data.txt
"""

if __name__=='__main__':
    # parse command line arguments
    # print error + usage if something is wrong
    try:
        host     =     get_option('--host')
        channel  = int(get_option('--ch'))
        num      = int(get_option('--num'))
    except OptionError as err:
        raise SystemExit(str(err)+'\n'+usage_str)
    dlm_trigger = '--dlm-trigger' in sys.argv

    # connect to server and record data
    with Monitor(host) as mon, ControlClient(host) as ctrl:
        pulses = record(mon, channel, num, ctrl, dlm_trigger)

    # At this point, you have the data contained in the list named
    # "pulses", you can do whatever you want with it. Here we simply write
    # the data to stdout (one pulse per line).
    for p in pulses:
        print(' '.join([str(x) for x in p]))
    
